
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-pyunits/basic_usage.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_00-pyunits_basic_usage.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-pyunits_basic_usage.py:


.. _ref_basic_usage:

PyAnsys Units basics
--------------------
PyAnsys Units provides a Pythonic interface for units, unit systems, and unit conversions.
Its features enable seamless setup and usage of physical quantities.

This example shows you how to perform these tasks:

- Create quantities (unit strings, dimensions, and quantity maps).
- Access different quantity properties.
- Perform arithmetic operations.
- Perform unit conversions.
- Create unit systems (custom and predefined).
- Apply unit systems to quantities.

.. GENERATED FROM PYTHON SOURCE LINES 18-21

.. code-block:: default


    # sphinx_gallery_thumbnail_path = '_static/basic_usage.png'








.. GENERATED FROM PYTHON SOURCE LINES 22-25

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Import the ``ansys.units`` package.

.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: default


    import ansys.units as ansunits








.. GENERATED FROM PYTHON SOURCE LINES 29-35

Create quantities
~~~~~~~~~~~~~~~~~
You can instantiate quantities using one of three methods:
- Unit strings : str
- Dimensions : list
- Quantity maps : dict

.. GENERATED FROM PYTHON SOURCE LINES 35-66

.. code-block:: default


    # Unit strings

    volume = ansunits.Quantity(value=1, units="m^3")

    acceleration = ansunits.Quantity(value=3, units="m s^-2")

    torque = ansunits.Quantity(value=5, units="N m")

    # Dimensions

    vol_dims = [0, 3]
    volume = ansunits.Quantity(value=1, dimensions=vol_dims)

    acc_dims = [0, 1, -2]
    acceleration = ansunits.Quantity(value=3, dimensions=acc_dims)

    tor_dims = [1, 2, -2]
    torque = ansunits.Quantity(value=5, dimensions=tor_dims)

    # Quantity map

    vol_map = {"Volume": 1}
    volume = ansunits.Quantity(value=1, quantity_map=vol_map)

    acc_map = {"Acceleration": 1}
    acceleration = ansunits.Quantity(value=3, quantity_map=acc_map)

    tor_map = {"Torque": 1}
    torque = ansunits.Quantity(value=5, quantity_map=tor_map)








.. GENERATED FROM PYTHON SOURCE LINES 67-70

Specify quantity properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~
For a quantity, you specify seven properties:

.. GENERATED FROM PYTHON SOURCE LINES 70-90

.. code-block:: default


    # 1. value : float | int
    # 2. units : str
    # 3. si_value : float | int
    # 4. si_units : str
    # 5. dimensions : list
    # 6. is_dimensionless : bool
    # 7. type : str

    cap_map = {"Capacitance": 1}
    capacitance = ansunits.Quantity(value=50, quantity_map=cap_map)

    capacitance.value  # >>> 50.0
    capacitance.units  # >>> "farad"
    capacitance.si_value  # >>> 50.0
    capacitance.si_units  # >>> "kg^-1 m^-2 s^4 A^2"
    capacitance.dimensions  # >>> [-1.0, -2.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0]
    capacitance.is_dimensionless  # >>> False
    capacitance.type  # >>> "Derived"





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    'Derived'



.. GENERATED FROM PYTHON SOURCE LINES 91-94

Perform arithmetic operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can perform all mathematical operations on a quantity.

.. GENERATED FROM PYTHON SOURCE LINES 94-145

.. code-block:: default


    import math

    q1 = ansunits.Quantity(10.0, "m s^-1")
    q2 = ansunits.Quantity(5.0, "m s^-1")

    # Subtraction

    q3 = q2 - q1
    q3.value  # >>> 5.0
    q3.units  # >>> "m s^-1"

    # Addition

    q4 = q2 + q1
    q4.value  # >>> 15.0
    q4.units  # >>> "m s^-1"

    # Division

    q5 = q2 / q1
    q5.value  # >>> 2.0
    q5.units  # >>> None

    # Multiplication

    q6 = q2 * q1
    q6.value  # >>> 50.0
    q6.units  # >>> "m^2 s^-2"

    # Negation

    q7 = -q2
    q7.value  # >>> -5.0
    q7.units  # >>> "m s^-1"

    # Exponents

    q8 = q1**2
    q8.value  # >>> 100.0
    q8.units  # >>> "m^2 s^-2"

    # Roots

    math.sqrt(q2)  # >>> 2.2360679775

    # Trigonometry

    math.sin(ansunits.Quantity(90, "degree"))  # >>> 1.0
    math.cos(ansunits.Quantity(math.pi, "radian"))  # >>> -1.0





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    -1.0



.. GENERATED FROM PYTHON SOURCE LINES 146-149

Perform conversions
~~~~~~~~~~~~~~~~~~~
You can perform conversions on quantities with compatible units.

.. GENERATED FROM PYTHON SOURCE LINES 149-168

.. code-block:: default


    slug = ansunits.Quantity(value=5, units="slug")
    kg = slug.to("kg")

    kg.value  # >>> 72.96951468603184
    kg.units  # >>> "kg"

    m = ansunits.Quantity(value=25, units="m")
    cm = m.to("cm")

    cm.value  # >>> 2500
    cm.units  # >>> "cm"

    dvis = ansunits.Quantity(1.0, "lb ft^-1 s^-1")
    pas = dvis.to("Pa s")

    pas.value  # >>> 1.4881639435695542
    pas.units  # >>> "Pa s"





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    'Pa s'



.. GENERATED FROM PYTHON SOURCE LINES 169-175

Instantiate unit systems
~~~~~~~~~~~~~~~~~~~~~~~~
You can instantiate unit systems using one of two methods:

- Custom units
- Predefined unit systems

.. GENERATED FROM PYTHON SOURCE LINES 175-191

.. code-block:: default


    # Custom units

    sys_units = ["kg", "m", "s", "K", "radian", "mol", "cd", "A", "sr"]
    sys = ansunits.UnitSystem(name="sys", base_units=sys_units)

    sys.name  # >>> "sys"
    sys.base_units  # >>> ["kg", "m", "s", "K", "radian", "mol", "cd", "A", "sr"]

    # Predefined unit systems

    cgs = ansunits.UnitSystem(unit_sys="CGS")

    cgs.name  # >>> "cgs"
    cgs.base_units  # >>> ['g', 'cm', 's', 'K', 'radian', 'mol', 'cd', 'A', 'sr']





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['g', 'cm', 's', 'K', 'radian', 'mol', 'cd', 'A', 'sr']



.. GENERATED FROM PYTHON SOURCE LINES 192-195

Create a unit system independently
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can create a unit system independently and apply it to quantities.

.. GENERATED FROM PYTHON SOURCE LINES 195-203

.. code-block:: default


    si = ansunits.UnitSystem(unit_sys="SI")
    fps = ansunits.Quantity(value=11.2, units="ft s^-1")

    mps = si.convert(fps)

    mps.value  # >>> 3.4137599999999995
    mps.units  # >>> "m s^-1"




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    'm s^-1'




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.008 seconds)


.. _sphx_glr_download_examples_00-pyunits_basic_usage.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: basic_usage.py <basic_usage.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: basic_usage.ipynb <basic_usage.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
