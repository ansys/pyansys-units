name: Github Actions

on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MAIN_PYTHON_VERSION: '3.10'
  DOCUMENTATION_CNAME: 'units.docs.pyansys.com'
  LIBRARY_NAME: 'ansys-units'
  LIBRARY_NAMESPACE: 'ansys.units'

jobs:

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/code-style@v8
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: "Running documentation style checks"
        uses: ansys/actions/doc-style@v8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          vale-version: "3.4.1"

  pr-name:
    if: github.event_name == 'pull_request'
    name: Check the name of the PR
    runs-on: ubuntu-latest
    steps:
      - name: Check commit name
        uses: ansys/actions/check-pr-title@v8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests:
    name: "Build and Smoke tests"
    runs-on: ${{ matrix.os }}
    needs: [code-style]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - uses: ansys/actions/build-wheelhouse@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  tests:
    name: "Tests"
    runs-on: ${{ matrix.os }}
    needs: [smoke-tests]
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false
    steps:
      - uses: ansys/actions/tests-pytest@v8
        with:
          pytest-markers: '-m "not developer_only"'

  doc-build:
    name: "Build documentation"
    runs-on: ubuntu-latest
    needs: [doc-style]
    steps:
      - uses: ansys/actions/doc-build@v8
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          check-links: false

  build-library:
    name: "Build library basic example"
    runs-on: ubuntu-latest
    needs: [doc-build, tests]
    steps:
      - uses: ansys/actions/build-library@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-deploy-dev:
    name: "Deploy development documentation"
    runs-on: ubuntu-latest
    needs: [build-library]
    steps:
      - uses: ansys/actions/doc-deploy-dev@v8
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: "Release project to private, public PyPI and GitHub"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [build-library]
    runs-on: ubuntu-latest
    steps:
      - name: "Release to the private PyPI repository"
        uses: ansys/actions/release-pypi-private@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

      - name: "Release to the public PyPI repository"
        uses: ansys/actions/release-pypi-public@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

      - name: "Release to GitHub"
        uses: ansys/actions/release-github@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}

  doc-deploy-stable:
    name: "Deploy stable docs"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags') && !contains(github.ref, 'dev')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Deploy the stable documentation
        uses: ansys/actions/doc-deploy-stable@v8
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
